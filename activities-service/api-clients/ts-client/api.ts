/* tslint:disable */
/* eslint-disable */
/**
 * Activities Service
 * Activities Management Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ActivityEditDTO
 */
export interface ActivityEditDTO {
    /**
     * 
     * @type {string}
     * @memberof ActivityEditDTO
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ActivityEditDTO
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ActivityEditDTO
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof ActivityEditDTO
     */
    'longitude': number;
    /**
     * 
     * @type {number}
     * @memberof ActivityEditDTO
     */
    'type': number;
    /**
     * 
     * @type {string}
     * @memberof ActivityEditDTO
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof ActivityEditDTO
     */
    'booking_url': string;
    /**
     * 
     * @type {number}
     * @memberof ActivityEditDTO
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface CreateReviewDTO
 */
export interface CreateReviewDTO {
    /**
     * 
     * @type {number}
     * @memberof CreateReviewDTO
     */
    'activity_id': number;
    /**
     * 
     * @type {number}
     * @memberof CreateReviewDTO
     */
    'rating': number;
    /**
     * 
     * @type {string}
     * @memberof CreateReviewDTO
     */
    'review': string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create New Activity
         * @param {string} name 
         * @param {number} type 
         * @param {number} latitude 
         * @param {number} longitude 
         * @param {string} address 
         * @param {string} bookingUrl 
         * @param {string | null} [description] 
         * @param {Array<File> | null} [files] 
         * @param {File | null} [heroImage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewActivityApiActivitiesPost: async (name: string, type: number, latitude: number, longitude: number, address: string, bookingUrl: string, description?: string | null, files?: Array<File> | null, heroImage?: File | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('createNewActivityApiActivitiesPost', 'name', name)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('createNewActivityApiActivitiesPost', 'type', type)
            // verify required parameter 'latitude' is not null or undefined
            assertParamExists('createNewActivityApiActivitiesPost', 'latitude', latitude)
            // verify required parameter 'longitude' is not null or undefined
            assertParamExists('createNewActivityApiActivitiesPost', 'longitude', longitude)
            // verify required parameter 'address' is not null or undefined
            assertParamExists('createNewActivityApiActivitiesPost', 'address', address)
            // verify required parameter 'bookingUrl' is not null or undefined
            assertParamExists('createNewActivityApiActivitiesPost', 'bookingUrl', bookingUrl)
            const localVarPath = `/api/activities/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication X-API-KEY required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.append('type', type as any);
            }
                if (files) {
                files.forEach((element) => {
                  localVarFormParams.append('files', element as any);
                })
            }

    
            if (latitude !== undefined) { 
                localVarFormParams.append('latitude', latitude as any);
            }
    
            if (longitude !== undefined) { 
                localVarFormParams.append('longitude', longitude as any);
            }
    
            if (address !== undefined) { 
                localVarFormParams.append('address', address as any);
            }
    
            if (bookingUrl !== undefined) { 
                localVarFormParams.append('booking_url', bookingUrl as any);
            }
    
            if (heroImage !== undefined) { 
                localVarFormParams.append('hero_image', heroImage as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create New Activity Review
         * @param {CreateReviewDTO} createReviewDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewActivityReviewApiActivitiesReviewsPost: async (createReviewDTO: CreateReviewDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createReviewDTO' is not null or undefined
            assertParamExists('createNewActivityReviewApiActivitiesReviewsPost', 'createReviewDTO', createReviewDTO)
            const localVarPath = `/api/activities/reviews/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication X-API-KEY required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createReviewDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Activity
         * @param {number} activityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteActivityApiActivitiesActivityIdDelete: async (activityId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'activityId' is not null or undefined
            assertParamExists('deleteActivityApiActivitiesActivityIdDelete', 'activityId', activityId)
            const localVarPath = `/api/activities/{activity_id}`
                .replace(`{${"activity_id"}}`, encodeURIComponent(String(activityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication X-API-KEY required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Activity Images
         * @param {number} imageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteActivityImagesApiActivitiesImagesImageIdDelete: async (imageId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('deleteActivityImagesApiActivitiesImagesImageIdDelete', 'imageId', imageId)
            const localVarPath = `/api/activities/images/{image_id}`
                .replace(`{${"image_id"}}`, encodeURIComponent(String(imageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication X-API-KEY required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Activity Review
         * @param {number} reviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteActivityReviewApiActivitiesReviewsReviewIdDelete: async (reviewId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reviewId' is not null or undefined
            assertParamExists('deleteActivityReviewApiActivitiesReviewsReviewIdDelete', 'reviewId', reviewId)
            const localVarPath = `/api/activities/reviews/{review_id}`
                .replace(`{${"review_id"}}`, encodeURIComponent(String(reviewId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication X-API-KEY required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Activities
         * @param {string} [searchTerm] 
         * @param {string} [sortField] 
         * @param {string} [sortOrder] 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {string | null} [categories] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivitiesApiActivitiesSearchGet: async (searchTerm?: string, sortField?: string, sortOrder?: string, limit?: number, page?: number, categories?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/activities/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication X-API-KEY required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            if (searchTerm !== undefined) {
                localVarQueryParameter['search_term'] = searchTerm;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['sort_field'] = sortField;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (categories !== undefined) {
                localVarQueryParameter['categories'] = categories;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Activities By Location
         * @param {number} latitude 
         * @param {number} longitude 
         * @param {number} [radius] 
         * @param {string} [searchTerm] 
         * @param {string | null} [categories] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivitiesByLocationApiActivitiesSearchLocationGet: async (latitude: number, longitude: number, radius?: number, searchTerm?: string, categories?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'latitude' is not null or undefined
            assertParamExists('getActivitiesByLocationApiActivitiesSearchLocationGet', 'latitude', latitude)
            // verify required parameter 'longitude' is not null or undefined
            assertParamExists('getActivitiesByLocationApiActivitiesSearchLocationGet', 'longitude', longitude)
            const localVarPath = `/api/activities/search/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication X-API-KEY required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (searchTerm !== undefined) {
                localVarQueryParameter['search_term'] = searchTerm;
            }

            if (categories !== undefined) {
                localVarQueryParameter['categories'] = categories;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Activity
         * @param {number} activityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivityApiActivitiesActivityIdGet: async (activityId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'activityId' is not null or undefined
            assertParamExists('getActivityApiActivitiesActivityIdGet', 'activityId', activityId)
            const localVarPath = `/api/activities/{activity_id}`
                .replace(`{${"activity_id"}}`, encodeURIComponent(String(activityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication X-API-KEY required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Activity Images
         * @param {number} activityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivityImagesApiActivitiesImagesActivityActivityIdGet: async (activityId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'activityId' is not null or undefined
            assertParamExists('getActivityImagesApiActivitiesImagesActivityActivityIdGet', 'activityId', activityId)
            const localVarPath = `/api/activities/images/activity/{activity_id}`
                .replace(`{${"activity_id"}}`, encodeURIComponent(String(activityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication X-API-KEY required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Image
         * @param {number} imageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageApiActivitiesImagesImageIdGet: async (imageId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('getImageApiActivitiesImagesImageIdGet', 'imageId', imageId)
            const localVarPath = `/api/activities/images/{image_id}`
                .replace(`{${"image_id"}}`, encodeURIComponent(String(imageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication X-API-KEY required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Reviews
         * @param {string} [searchTerm] 
         * @param {string} [sortField] 
         * @param {string} [sortOrder] 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {number} [activityId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewsApiActivitiesReviewsGet: async (searchTerm?: string, sortField?: string, sortOrder?: string, limit?: number, page?: number, activityId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/activities/reviews/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication X-API-KEY required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            if (searchTerm !== undefined) {
                localVarQueryParameter['search_term'] = searchTerm;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['sort_field'] = sortField;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (activityId !== undefined) {
                localVarQueryParameter['activity_id'] = activityId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Activity
         * @param {ActivityEditDTO} activityEditDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateActivityApiActivitiesEditPost: async (activityEditDTO: ActivityEditDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'activityEditDTO' is not null or undefined
            assertParamExists('updateActivityApiActivitiesEditPost', 'activityEditDTO', activityEditDTO)
            const localVarPath = `/api/activities/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication X-API-KEY required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(activityEditDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload Activity Images
         * @param {number} activityId 
         * @param {Array<File>} images 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadActivityImagesApiActivitiesImagesActivityActivityIdUploadPost: async (activityId: number, images: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'activityId' is not null or undefined
            assertParamExists('uploadActivityImagesApiActivitiesImagesActivityActivityIdUploadPost', 'activityId', activityId)
            // verify required parameter 'images' is not null or undefined
            assertParamExists('uploadActivityImagesApiActivitiesImagesActivityActivityIdUploadPost', 'images', images)
            const localVarPath = `/api/activities/images/activity/{activity_id}/upload`
                .replace(`{${"activity_id"}}`, encodeURIComponent(String(activityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication X-API-KEY required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            if (images) {
                images.forEach((element) => {
                  localVarFormParams.append('images', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload Hero Image
         * @param {number} activityId 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadHeroImageApiActivitiesImagesActivityActivityIdHeroUploadPost: async (activityId: number, image: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'activityId' is not null or undefined
            assertParamExists('uploadHeroImageApiActivitiesImagesActivityActivityIdHeroUploadPost', 'activityId', activityId)
            // verify required parameter 'image' is not null or undefined
            assertParamExists('uploadHeroImageApiActivitiesImagesActivityActivityIdHeroUploadPost', 'image', image)
            const localVarPath = `/api/activities/images/activity/{activity_id}/hero/upload`
                .replace(`{${"activity_id"}}`, encodeURIComponent(String(activityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication X-API-KEY required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create New Activity
         * @param {string} name 
         * @param {number} type 
         * @param {number} latitude 
         * @param {number} longitude 
         * @param {string} address 
         * @param {string} bookingUrl 
         * @param {string | null} [description] 
         * @param {Array<File> | null} [files] 
         * @param {File | null} [heroImage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewActivityApiActivitiesPost(name: string, type: number, latitude: number, longitude: number, address: string, bookingUrl: string, description?: string | null, files?: Array<File> | null, heroImage?: File | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewActivityApiActivitiesPost(name, type, latitude, longitude, address, bookingUrl, description, files, heroImage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createNewActivityApiActivitiesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create New Activity Review
         * @param {CreateReviewDTO} createReviewDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewActivityReviewApiActivitiesReviewsPost(createReviewDTO: CreateReviewDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewActivityReviewApiActivitiesReviewsPost(createReviewDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createNewActivityReviewApiActivitiesReviewsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Activity
         * @param {number} activityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteActivityApiActivitiesActivityIdDelete(activityId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteActivityApiActivitiesActivityIdDelete(activityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteActivityApiActivitiesActivityIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Activity Images
         * @param {number} imageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteActivityImagesApiActivitiesImagesImageIdDelete(imageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteActivityImagesApiActivitiesImagesImageIdDelete(imageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteActivityImagesApiActivitiesImagesImageIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Activity Review
         * @param {number} reviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteActivityReviewApiActivitiesReviewsReviewIdDelete(reviewId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteActivityReviewApiActivitiesReviewsReviewIdDelete(reviewId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteActivityReviewApiActivitiesReviewsReviewIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Activities
         * @param {string} [searchTerm] 
         * @param {string} [sortField] 
         * @param {string} [sortOrder] 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {string | null} [categories] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActivitiesApiActivitiesSearchGet(searchTerm?: string, sortField?: string, sortOrder?: string, limit?: number, page?: number, categories?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActivitiesApiActivitiesSearchGet(searchTerm, sortField, sortOrder, limit, page, categories, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getActivitiesApiActivitiesSearchGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Activities By Location
         * @param {number} latitude 
         * @param {number} longitude 
         * @param {number} [radius] 
         * @param {string} [searchTerm] 
         * @param {string | null} [categories] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActivitiesByLocationApiActivitiesSearchLocationGet(latitude: number, longitude: number, radius?: number, searchTerm?: string, categories?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActivitiesByLocationApiActivitiesSearchLocationGet(latitude, longitude, radius, searchTerm, categories, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getActivitiesByLocationApiActivitiesSearchLocationGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Activity
         * @param {number} activityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActivityApiActivitiesActivityIdGet(activityId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActivityApiActivitiesActivityIdGet(activityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getActivityApiActivitiesActivityIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Activity Images
         * @param {number} activityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActivityImagesApiActivitiesImagesActivityActivityIdGet(activityId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActivityImagesApiActivitiesImagesActivityActivityIdGet(activityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getActivityImagesApiActivitiesImagesActivityActivityIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Image
         * @param {number} imageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImageApiActivitiesImagesImageIdGet(imageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageApiActivitiesImagesImageIdGet(imageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getImageApiActivitiesImagesImageIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Reviews
         * @param {string} [searchTerm] 
         * @param {string} [sortField] 
         * @param {string} [sortOrder] 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {number} [activityId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReviewsApiActivitiesReviewsGet(searchTerm?: string, sortField?: string, sortOrder?: string, limit?: number, page?: number, activityId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReviewsApiActivitiesReviewsGet(searchTerm, sortField, sortOrder, limit, page, activityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getReviewsApiActivitiesReviewsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Activity
         * @param {ActivityEditDTO} activityEditDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateActivityApiActivitiesEditPost(activityEditDTO: ActivityEditDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateActivityApiActivitiesEditPost(activityEditDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateActivityApiActivitiesEditPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upload Activity Images
         * @param {number} activityId 
         * @param {Array<File>} images 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadActivityImagesApiActivitiesImagesActivityActivityIdUploadPost(activityId: number, images: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadActivityImagesApiActivitiesImagesActivityActivityIdUploadPost(activityId, images, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.uploadActivityImagesApiActivitiesImagesActivityActivityIdUploadPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upload Hero Image
         * @param {number} activityId 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadHeroImageApiActivitiesImagesActivityActivityIdHeroUploadPost(activityId: number, image: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadHeroImageApiActivitiesImagesActivityActivityIdHeroUploadPost(activityId, image, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.uploadHeroImageApiActivitiesImagesActivityActivityIdHeroUploadPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Create New Activity
         * @param {string} name 
         * @param {number} type 
         * @param {number} latitude 
         * @param {number} longitude 
         * @param {string} address 
         * @param {string} bookingUrl 
         * @param {string | null} [description] 
         * @param {Array<File> | null} [files] 
         * @param {File | null} [heroImage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewActivityApiActivitiesPost(name: string, type: number, latitude: number, longitude: number, address: string, bookingUrl: string, description?: string | null, files?: Array<File> | null, heroImage?: File | null, options?: any): AxiosPromise<any> {
            return localVarFp.createNewActivityApiActivitiesPost(name, type, latitude, longitude, address, bookingUrl, description, files, heroImage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create New Activity Review
         * @param {CreateReviewDTO} createReviewDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewActivityReviewApiActivitiesReviewsPost(createReviewDTO: CreateReviewDTO, options?: any): AxiosPromise<any> {
            return localVarFp.createNewActivityReviewApiActivitiesReviewsPost(createReviewDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Activity
         * @param {number} activityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteActivityApiActivitiesActivityIdDelete(activityId: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteActivityApiActivitiesActivityIdDelete(activityId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Activity Images
         * @param {number} imageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteActivityImagesApiActivitiesImagesImageIdDelete(imageId: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteActivityImagesApiActivitiesImagesImageIdDelete(imageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Activity Review
         * @param {number} reviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteActivityReviewApiActivitiesReviewsReviewIdDelete(reviewId: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteActivityReviewApiActivitiesReviewsReviewIdDelete(reviewId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Activities
         * @param {string} [searchTerm] 
         * @param {string} [sortField] 
         * @param {string} [sortOrder] 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {string | null} [categories] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivitiesApiActivitiesSearchGet(searchTerm?: string, sortField?: string, sortOrder?: string, limit?: number, page?: number, categories?: string | null, options?: any): AxiosPromise<any> {
            return localVarFp.getActivitiesApiActivitiesSearchGet(searchTerm, sortField, sortOrder, limit, page, categories, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Activities By Location
         * @param {number} latitude 
         * @param {number} longitude 
         * @param {number} [radius] 
         * @param {string} [searchTerm] 
         * @param {string | null} [categories] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivitiesByLocationApiActivitiesSearchLocationGet(latitude: number, longitude: number, radius?: number, searchTerm?: string, categories?: string | null, options?: any): AxiosPromise<any> {
            return localVarFp.getActivitiesByLocationApiActivitiesSearchLocationGet(latitude, longitude, radius, searchTerm, categories, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Activity
         * @param {number} activityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivityApiActivitiesActivityIdGet(activityId: number, options?: any): AxiosPromise<any> {
            return localVarFp.getActivityApiActivitiesActivityIdGet(activityId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Activity Images
         * @param {number} activityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivityImagesApiActivitiesImagesActivityActivityIdGet(activityId: number, options?: any): AxiosPromise<any> {
            return localVarFp.getActivityImagesApiActivitiesImagesActivityActivityIdGet(activityId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Image
         * @param {number} imageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageApiActivitiesImagesImageIdGet(imageId: number, options?: any): AxiosPromise<any> {
            return localVarFp.getImageApiActivitiesImagesImageIdGet(imageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Reviews
         * @param {string} [searchTerm] 
         * @param {string} [sortField] 
         * @param {string} [sortOrder] 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {number} [activityId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewsApiActivitiesReviewsGet(searchTerm?: string, sortField?: string, sortOrder?: string, limit?: number, page?: number, activityId?: number, options?: any): AxiosPromise<any> {
            return localVarFp.getReviewsApiActivitiesReviewsGet(searchTerm, sortField, sortOrder, limit, page, activityId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Activity
         * @param {ActivityEditDTO} activityEditDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateActivityApiActivitiesEditPost(activityEditDTO: ActivityEditDTO, options?: any): AxiosPromise<any> {
            return localVarFp.updateActivityApiActivitiesEditPost(activityEditDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload Activity Images
         * @param {number} activityId 
         * @param {Array<File>} images 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadActivityImagesApiActivitiesImagesActivityActivityIdUploadPost(activityId: number, images: Array<File>, options?: any): AxiosPromise<any> {
            return localVarFp.uploadActivityImagesApiActivitiesImagesActivityActivityIdUploadPost(activityId, images, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload Hero Image
         * @param {number} activityId 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadHeroImageApiActivitiesImagesActivityActivityIdHeroUploadPost(activityId: number, image: File, options?: any): AxiosPromise<any> {
            return localVarFp.uploadHeroImageApiActivitiesImagesActivityActivityIdHeroUploadPost(activityId, image, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Create New Activity
     * @param {string} name 
     * @param {number} type 
     * @param {number} latitude 
     * @param {number} longitude 
     * @param {string} address 
     * @param {string} bookingUrl 
     * @param {string | null} [description] 
     * @param {Array<File> | null} [files] 
     * @param {File | null} [heroImage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createNewActivityApiActivitiesPost(name: string, type: number, latitude: number, longitude: number, address: string, bookingUrl: string, description?: string | null, files?: Array<File> | null, heroImage?: File | null, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createNewActivityApiActivitiesPost(name, type, latitude, longitude, address, bookingUrl, description, files, heroImage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create New Activity Review
     * @param {CreateReviewDTO} createReviewDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createNewActivityReviewApiActivitiesReviewsPost(createReviewDTO: CreateReviewDTO, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createNewActivityReviewApiActivitiesReviewsPost(createReviewDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Activity
     * @param {number} activityId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteActivityApiActivitiesActivityIdDelete(activityId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteActivityApiActivitiesActivityIdDelete(activityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Activity Images
     * @param {number} imageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteActivityImagesApiActivitiesImagesImageIdDelete(imageId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteActivityImagesApiActivitiesImagesImageIdDelete(imageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Activity Review
     * @param {number} reviewId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteActivityReviewApiActivitiesReviewsReviewIdDelete(reviewId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteActivityReviewApiActivitiesReviewsReviewIdDelete(reviewId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Activities
     * @param {string} [searchTerm] 
     * @param {string} [sortField] 
     * @param {string} [sortOrder] 
     * @param {number} [limit] 
     * @param {number} [page] 
     * @param {string | null} [categories] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getActivitiesApiActivitiesSearchGet(searchTerm?: string, sortField?: string, sortOrder?: string, limit?: number, page?: number, categories?: string | null, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getActivitiesApiActivitiesSearchGet(searchTerm, sortField, sortOrder, limit, page, categories, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Activities By Location
     * @param {number} latitude 
     * @param {number} longitude 
     * @param {number} [radius] 
     * @param {string} [searchTerm] 
     * @param {string | null} [categories] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getActivitiesByLocationApiActivitiesSearchLocationGet(latitude: number, longitude: number, radius?: number, searchTerm?: string, categories?: string | null, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getActivitiesByLocationApiActivitiesSearchLocationGet(latitude, longitude, radius, searchTerm, categories, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Activity
     * @param {number} activityId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getActivityApiActivitiesActivityIdGet(activityId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getActivityApiActivitiesActivityIdGet(activityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Activity Images
     * @param {number} activityId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getActivityImagesApiActivitiesImagesActivityActivityIdGet(activityId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getActivityImagesApiActivitiesImagesActivityActivityIdGet(activityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Image
     * @param {number} imageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getImageApiActivitiesImagesImageIdGet(imageId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getImageApiActivitiesImagesImageIdGet(imageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Reviews
     * @param {string} [searchTerm] 
     * @param {string} [sortField] 
     * @param {string} [sortOrder] 
     * @param {number} [limit] 
     * @param {number} [page] 
     * @param {number} [activityId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getReviewsApiActivitiesReviewsGet(searchTerm?: string, sortField?: string, sortOrder?: string, limit?: number, page?: number, activityId?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getReviewsApiActivitiesReviewsGet(searchTerm, sortField, sortOrder, limit, page, activityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Activity
     * @param {ActivityEditDTO} activityEditDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateActivityApiActivitiesEditPost(activityEditDTO: ActivityEditDTO, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateActivityApiActivitiesEditPost(activityEditDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload Activity Images
     * @param {number} activityId 
     * @param {Array<File>} images 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uploadActivityImagesApiActivitiesImagesActivityActivityIdUploadPost(activityId: number, images: Array<File>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uploadActivityImagesApiActivitiesImagesActivityActivityIdUploadPost(activityId, images, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload Hero Image
     * @param {number} activityId 
     * @param {File} image 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uploadHeroImageApiActivitiesImagesActivityActivityIdHeroUploadPost(activityId: number, image: File, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uploadHeroImageApiActivitiesImagesActivityActivityIdHeroUploadPost(activityId, image, options).then((request) => request(this.axios, this.basePath));
    }
}



