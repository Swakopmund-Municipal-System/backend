//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DefaultAPI {

    /**
     Create New Activity
     
     - parameter name: (form)  
     - parameter type: (form)  
     - parameter latitude: (form)  
     - parameter longitude: (form)  
     - parameter address: (form)  
     - parameter bookingUrl: (form)  
     - parameter description: (form)  (optional)
     - parameter files: (form)  (optional)
     - parameter heroImage: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createNewActivityApiActivitiesPost(name: String, type: Int, latitude: Double, longitude: Double, address: String, bookingUrl: String, description: String? = nil, files: [URL]? = nil, heroImage: URL? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return createNewActivityApiActivitiesPostWithRequestBuilder(name: name, type: type, latitude: latitude, longitude: longitude, address: address, bookingUrl: bookingUrl, description: description, files: files, heroImage: heroImage).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create New Activity
     - POST /api/activities/
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: X-API-KEY
     - parameter name: (form)  
     - parameter type: (form)  
     - parameter latitude: (form)  
     - parameter longitude: (form)  
     - parameter address: (form)  
     - parameter bookingUrl: (form)  
     - parameter description: (form)  (optional)
     - parameter files: (form)  (optional)
     - parameter heroImage: (form)  (optional)
     - returns: RequestBuilder<AnyCodable?> 
     */
    open class func createNewActivityApiActivitiesPostWithRequestBuilder(name: String, type: Int, latitude: Double, longitude: Double, address: String, bookingUrl: String, description: String? = nil, files: [URL]? = nil, heroImage: URL? = nil) -> RequestBuilder<AnyCodable?> {
        let localVariablePath = "/api/activities/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "name": name.encodeToJSON(),
            "description": description?.encodeToJSON(),
            "type": type.encodeToJSON(),
            "files": files?.encodeToJSON(),
            "latitude": latitude.encodeToJSON(),
            "longitude": longitude.encodeToJSON(),
            "address": address.encodeToJSON(),
            "booking_url": bookingUrl.encodeToJSON(),
            "hero_image": heroImage?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable?>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create New Activity Review
     
     - parameter createReviewDTO: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createNewActivityReviewApiActivitiesReviewsPost(createReviewDTO: CreateReviewDTO, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return createNewActivityReviewApiActivitiesReviewsPostWithRequestBuilder(createReviewDTO: createReviewDTO).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create New Activity Review
     - POST /api/activities/reviews/
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: X-API-KEY
     - parameter createReviewDTO: (body)  
     - returns: RequestBuilder<AnyCodable?> 
     */
    open class func createNewActivityReviewApiActivitiesReviewsPostWithRequestBuilder(createReviewDTO: CreateReviewDTO) -> RequestBuilder<AnyCodable?> {
        let localVariablePath = "/api/activities/reviews/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createReviewDTO)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable?>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete Activity
     
     - parameter activityId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteActivityApiActivitiesActivityIdDelete(activityId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteActivityApiActivitiesActivityIdDeleteWithRequestBuilder(activityId: activityId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Activity
     - DELETE /api/activities/{activity_id}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: X-API-KEY
     - parameter activityId: (path)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func deleteActivityApiActivitiesActivityIdDeleteWithRequestBuilder(activityId: Int) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/api/activities/{activity_id}"
        let activityIdPreEscape = "\(APIHelper.mapValueToPathItem(activityId))"
        let activityIdPostEscape = activityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{activity_id}", with: activityIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete Activity Images
     
     - parameter imageId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteActivityImagesApiActivitiesImagesImageIdDelete(imageId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteActivityImagesApiActivitiesImagesImageIdDeleteWithRequestBuilder(imageId: imageId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Activity Images
     - DELETE /api/activities/images/{image_id}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: X-API-KEY
     - parameter imageId: (path)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func deleteActivityImagesApiActivitiesImagesImageIdDeleteWithRequestBuilder(imageId: Int) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/api/activities/images/{image_id}"
        let imageIdPreEscape = "\(APIHelper.mapValueToPathItem(imageId))"
        let imageIdPostEscape = imageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{image_id}", with: imageIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete Activity Review
     
     - parameter reviewId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteActivityReviewApiActivitiesReviewsReviewIdDelete(reviewId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteActivityReviewApiActivitiesReviewsReviewIdDeleteWithRequestBuilder(reviewId: reviewId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Activity Review
     - DELETE /api/activities/reviews/{review_id}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: X-API-KEY
     - parameter reviewId: (path)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func deleteActivityReviewApiActivitiesReviewsReviewIdDeleteWithRequestBuilder(reviewId: Int) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/api/activities/reviews/{review_id}"
        let reviewIdPreEscape = "\(APIHelper.mapValueToPathItem(reviewId))"
        let reviewIdPostEscape = reviewIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{review_id}", with: reviewIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Activities
     
     - parameter searchTerm: (query)  (optional, default to "")
     - parameter sortField: (query)  (optional, default to "id")
     - parameter sortOrder: (query)  (optional, default to "desc")
     - parameter limit: (query)  (optional, default to 10)
     - parameter page: (query)  (optional, default to 1)
     - parameter categories: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getActivitiesApiActivitiesSearchGet(searchTerm: String? = nil, sortField: String? = nil, sortOrder: String? = nil, limit: Int? = nil, page: Int? = nil, categories: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getActivitiesApiActivitiesSearchGetWithRequestBuilder(searchTerm: searchTerm, sortField: sortField, sortOrder: sortOrder, limit: limit, page: page, categories: categories).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Activities
     - GET /api/activities/search
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: X-API-KEY
     - parameter searchTerm: (query)  (optional, default to "")
     - parameter sortField: (query)  (optional, default to "id")
     - parameter sortOrder: (query)  (optional, default to "desc")
     - parameter limit: (query)  (optional, default to 10)
     - parameter page: (query)  (optional, default to 1)
     - parameter categories: (query)  (optional)
     - returns: RequestBuilder<AnyCodable?> 
     */
    open class func getActivitiesApiActivitiesSearchGetWithRequestBuilder(searchTerm: String? = nil, sortField: String? = nil, sortOrder: String? = nil, limit: Int? = nil, page: Int? = nil, categories: String? = nil) -> RequestBuilder<AnyCodable?> {
        let localVariablePath = "/api/activities/search"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "search_term": (wrappedValue: searchTerm?.encodeToJSON(), isExplode: true),
            "sort_field": (wrappedValue: sortField?.encodeToJSON(), isExplode: true),
            "sort_order": (wrappedValue: sortOrder?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "categories": (wrappedValue: categories?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable?>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Activities By Location
     
     - parameter latitude: (query)  
     - parameter longitude: (query)  
     - parameter radius: (query)  (optional, default to 1000)
     - parameter searchTerm: (query)  (optional, default to "")
     - parameter categories: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getActivitiesByLocationApiActivitiesSearchLocationGet(latitude: Double, longitude: Double, radius: Int? = nil, searchTerm: String? = nil, categories: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getActivitiesByLocationApiActivitiesSearchLocationGetWithRequestBuilder(latitude: latitude, longitude: longitude, radius: radius, searchTerm: searchTerm, categories: categories).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Activities By Location
     - GET /api/activities/search/location
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: X-API-KEY
     - parameter latitude: (query)  
     - parameter longitude: (query)  
     - parameter radius: (query)  (optional, default to 1000)
     - parameter searchTerm: (query)  (optional, default to "")
     - parameter categories: (query)  (optional)
     - returns: RequestBuilder<AnyCodable?> 
     */
    open class func getActivitiesByLocationApiActivitiesSearchLocationGetWithRequestBuilder(latitude: Double, longitude: Double, radius: Int? = nil, searchTerm: String? = nil, categories: String? = nil) -> RequestBuilder<AnyCodable?> {
        let localVariablePath = "/api/activities/search/location"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "latitude": (wrappedValue: latitude.encodeToJSON(), isExplode: true),
            "longitude": (wrappedValue: longitude.encodeToJSON(), isExplode: true),
            "radius": (wrappedValue: radius?.encodeToJSON(), isExplode: true),
            "search_term": (wrappedValue: searchTerm?.encodeToJSON(), isExplode: true),
            "categories": (wrappedValue: categories?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable?>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Activity
     
     - parameter activityId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getActivityApiActivitiesActivityIdGet(activityId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getActivityApiActivitiesActivityIdGetWithRequestBuilder(activityId: activityId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Activity
     - GET /api/activities/{activity_id}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: X-API-KEY
     - parameter activityId: (path)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getActivityApiActivitiesActivityIdGetWithRequestBuilder(activityId: Int) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/api/activities/{activity_id}"
        let activityIdPreEscape = "\(APIHelper.mapValueToPathItem(activityId))"
        let activityIdPostEscape = activityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{activity_id}", with: activityIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Activity Images
     
     - parameter activityId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getActivityImagesApiActivitiesImagesActivityActivityIdGet(activityId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getActivityImagesApiActivitiesImagesActivityActivityIdGetWithRequestBuilder(activityId: activityId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Activity Images
     - GET /api/activities/images/activity/{activity_id}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: X-API-KEY
     - parameter activityId: (path)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getActivityImagesApiActivitiesImagesActivityActivityIdGetWithRequestBuilder(activityId: Int) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/api/activities/images/activity/{activity_id}"
        let activityIdPreEscape = "\(APIHelper.mapValueToPathItem(activityId))"
        let activityIdPostEscape = activityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{activity_id}", with: activityIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Image
     
     - parameter imageId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getImageApiActivitiesImagesImageIdGet(imageId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getImageApiActivitiesImagesImageIdGetWithRequestBuilder(imageId: imageId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Image
     - GET /api/activities/images/{image_id}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: X-API-KEY
     - parameter imageId: (path)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getImageApiActivitiesImagesImageIdGetWithRequestBuilder(imageId: Int) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/api/activities/images/{image_id}"
        let imageIdPreEscape = "\(APIHelper.mapValueToPathItem(imageId))"
        let imageIdPostEscape = imageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{image_id}", with: imageIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Reviews
     
     - parameter searchTerm: (query)  (optional, default to "")
     - parameter sortField: (query)  (optional, default to "id")
     - parameter sortOrder: (query)  (optional, default to "desc")
     - parameter limit: (query)  (optional, default to 10)
     - parameter page: (query)  (optional, default to 1)
     - parameter activityId: (query)  (optional, default to 0)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getReviewsApiActivitiesReviewsGet(searchTerm: String? = nil, sortField: String? = nil, sortOrder: String? = nil, limit: Int? = nil, page: Int? = nil, activityId: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getReviewsApiActivitiesReviewsGetWithRequestBuilder(searchTerm: searchTerm, sortField: sortField, sortOrder: sortOrder, limit: limit, page: page, activityId: activityId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Reviews
     - GET /api/activities/reviews/
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: X-API-KEY
     - parameter searchTerm: (query)  (optional, default to "")
     - parameter sortField: (query)  (optional, default to "id")
     - parameter sortOrder: (query)  (optional, default to "desc")
     - parameter limit: (query)  (optional, default to 10)
     - parameter page: (query)  (optional, default to 1)
     - parameter activityId: (query)  (optional, default to 0)
     - returns: RequestBuilder<AnyCodable?> 
     */
    open class func getReviewsApiActivitiesReviewsGetWithRequestBuilder(searchTerm: String? = nil, sortField: String? = nil, sortOrder: String? = nil, limit: Int? = nil, page: Int? = nil, activityId: Int? = nil) -> RequestBuilder<AnyCodable?> {
        let localVariablePath = "/api/activities/reviews/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "search_term": (wrappedValue: searchTerm?.encodeToJSON(), isExplode: true),
            "sort_field": (wrappedValue: sortField?.encodeToJSON(), isExplode: true),
            "sort_order": (wrappedValue: sortOrder?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "activity_id": (wrappedValue: activityId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable?>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update Activity
     
     - parameter activityEditDTO: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateActivityApiActivitiesEditPost(activityEditDTO: ActivityEditDTO, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return updateActivityApiActivitiesEditPostWithRequestBuilder(activityEditDTO: activityEditDTO).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Activity
     - POST /api/activities/edit
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: X-API-KEY
     - parameter activityEditDTO: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func updateActivityApiActivitiesEditPostWithRequestBuilder(activityEditDTO: ActivityEditDTO) -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/api/activities/edit"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: activityEditDTO)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Upload Activity Images
     
     - parameter activityId: (path)  
     - parameter images: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func uploadActivityImagesApiActivitiesImagesActivityActivityIdUploadPost(activityId: Int, images: [URL], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return uploadActivityImagesApiActivitiesImagesActivityActivityIdUploadPostWithRequestBuilder(activityId: activityId, images: images).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Upload Activity Images
     - POST /api/activities/images/activity/{activity_id}/upload
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: X-API-KEY
     - parameter activityId: (path)  
     - parameter images: (form)  
     - returns: RequestBuilder<AnyCodable?> 
     */
    open class func uploadActivityImagesApiActivitiesImagesActivityActivityIdUploadPostWithRequestBuilder(activityId: Int, images: [URL]) -> RequestBuilder<AnyCodable?> {
        var localVariablePath = "/api/activities/images/activity/{activity_id}/upload"
        let activityIdPreEscape = "\(APIHelper.mapValueToPathItem(activityId))"
        let activityIdPostEscape = activityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{activity_id}", with: activityIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "images": images.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable?>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Upload Hero Image
     
     - parameter activityId: (path)  
     - parameter image: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func uploadHeroImageApiActivitiesImagesActivityActivityIdHeroUploadPost(activityId: Int, image: URL, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return uploadHeroImageApiActivitiesImagesActivityActivityIdHeroUploadPostWithRequestBuilder(activityId: activityId, image: image).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Upload Hero Image
     - POST /api/activities/images/activity/{activity_id}/hero/upload
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: X-API-KEY
     - parameter activityId: (path)  
     - parameter image: (form)  
     - returns: RequestBuilder<AnyCodable?> 
     */
    open class func uploadHeroImageApiActivitiesImagesActivityActivityIdHeroUploadPostWithRequestBuilder(activityId: Int, image: URL) -> RequestBuilder<AnyCodable?> {
        var localVariablePath = "/api/activities/images/activity/{activity_id}/hero/upload"
        let activityIdPreEscape = "\(APIHelper.mapValueToPathItem(activityId))"
        let activityIdPostEscape = activityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{activity_id}", with: activityIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "image": image.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable?>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
