//
// ActivityEditDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ActivityEditDTO: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: 3, maxLength: 255, pattern: nil)
    static let descriptionRule = StringRule(minLength: 3, maxLength: 512, pattern: nil)
    static let addressRule = StringRule(minLength: 3, maxLength: 255, pattern: nil)
    public var name: String
    public var description: String?
    public var latitude: Double
    public var longitude: Double
    public var type: Int
    public var address: String
    public var bookingUrl: String
    public var id: Int

    public init(name: String, description: String? = nil, latitude: Double, longitude: Double, type: Int, address: String, bookingUrl: String, id: Int) {
        self.name = name
        self.description = description
        self.latitude = latitude
        self.longitude = longitude
        self.type = type
        self.address = address
        self.bookingUrl = bookingUrl
        self.id = id
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case description
        case latitude
        case longitude
        case type
        case address
        case bookingUrl = "booking_url"
        case id
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(latitude, forKey: .latitude)
        try container.encode(longitude, forKey: .longitude)
        try container.encode(type, forKey: .type)
        try container.encode(address, forKey: .address)
        try container.encode(bookingUrl, forKey: .bookingUrl)
        try container.encode(id, forKey: .id)
    }
}

