/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.ActivityEditDTO
import org.openapitools.client.models.CreateReviewDTO
import org.openapitools.client.models.HTTPValidationError

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class DefaultApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Create New Activity
     * 
     * @param name 
     * @param type 
     * @param latitude 
     * @param longitude 
     * @param address 
     * @param bookingUrl 
     * @param description  (optional)
     * @param files  (optional)
     * @param heroImage  (optional)
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createNewActivityApiActivitiesPost(name: kotlin.String, type: kotlin.Int, latitude: java.math.BigDecimal, longitude: java.math.BigDecimal, address: kotlin.String, bookingUrl: kotlin.String, description: kotlin.String? = null, files: kotlin.collections.List<java.io.File>? = null, heroImage: java.io.File? = null) : kotlin.Any {
        val localVarResponse = createNewActivityApiActivitiesPostWithHttpInfo(name = name, type = type, latitude = latitude, longitude = longitude, address = address, bookingUrl = bookingUrl, description = description, files = files, heroImage = heroImage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create New Activity
     * 
     * @param name 
     * @param type 
     * @param latitude 
     * @param longitude 
     * @param address 
     * @param bookingUrl 
     * @param description  (optional)
     * @param files  (optional)
     * @param heroImage  (optional)
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createNewActivityApiActivitiesPostWithHttpInfo(name: kotlin.String, type: kotlin.Int, latitude: java.math.BigDecimal, longitude: java.math.BigDecimal, address: kotlin.String, bookingUrl: kotlin.String, description: kotlin.String?, files: kotlin.collections.List<java.io.File>?, heroImage: java.io.File?) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = createNewActivityApiActivitiesPostRequestConfig(name = name, type = type, latitude = latitude, longitude = longitude, address = address, bookingUrl = bookingUrl, description = description, files = files, heroImage = heroImage)

        return request<Map<String, PartConfig<*>>, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createNewActivityApiActivitiesPost
     *
     * @param name 
     * @param type 
     * @param latitude 
     * @param longitude 
     * @param address 
     * @param bookingUrl 
     * @param description  (optional)
     * @param files  (optional)
     * @param heroImage  (optional)
     * @return RequestConfig
     */
    fun createNewActivityApiActivitiesPostRequestConfig(name: kotlin.String, type: kotlin.Int, latitude: java.math.BigDecimal, longitude: java.math.BigDecimal, address: kotlin.String, bookingUrl: kotlin.String, description: kotlin.String?, files: kotlin.collections.List<java.io.File>?, heroImage: java.io.File?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "name" to PartConfig(body = name, headers = mutableMapOf()),
            "description" to PartConfig(body = description, headers = mutableMapOf()),
            "type" to PartConfig(body = type, headers = mutableMapOf()),
            "files" to PartConfig(body = files, headers = mutableMapOf()),
            "latitude" to PartConfig(body = latitude, headers = mutableMapOf()),
            "longitude" to PartConfig(body = longitude, headers = mutableMapOf()),
            "address" to PartConfig(body = address, headers = mutableMapOf()),
            "booking_url" to PartConfig(body = bookingUrl, headers = mutableMapOf()),
            "hero_image" to PartConfig(body = heroImage, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/activities/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create New Activity Review
     * 
     * @param createReviewDTO 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createNewActivityReviewApiActivitiesReviewsPost(createReviewDTO: CreateReviewDTO) : kotlin.Any {
        val localVarResponse = createNewActivityReviewApiActivitiesReviewsPostWithHttpInfo(createReviewDTO = createReviewDTO)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create New Activity Review
     * 
     * @param createReviewDTO 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createNewActivityReviewApiActivitiesReviewsPostWithHttpInfo(createReviewDTO: CreateReviewDTO) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = createNewActivityReviewApiActivitiesReviewsPostRequestConfig(createReviewDTO = createReviewDTO)

        return request<CreateReviewDTO, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createNewActivityReviewApiActivitiesReviewsPost
     *
     * @param createReviewDTO 
     * @return RequestConfig
     */
    fun createNewActivityReviewApiActivitiesReviewsPostRequestConfig(createReviewDTO: CreateReviewDTO) : RequestConfig<CreateReviewDTO> {
        val localVariableBody = createReviewDTO
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/activities/reviews/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete Activity
     * 
     * @param activityId 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteActivityApiActivitiesActivityIdDelete(activityId: kotlin.Int) : kotlin.Any {
        val localVarResponse = deleteActivityApiActivitiesActivityIdDeleteWithHttpInfo(activityId = activityId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete Activity
     * 
     * @param activityId 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteActivityApiActivitiesActivityIdDeleteWithHttpInfo(activityId: kotlin.Int) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = deleteActivityApiActivitiesActivityIdDeleteRequestConfig(activityId = activityId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteActivityApiActivitiesActivityIdDelete
     *
     * @param activityId 
     * @return RequestConfig
     */
    fun deleteActivityApiActivitiesActivityIdDeleteRequestConfig(activityId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/activities/{activity_id}".replace("{"+"activity_id"+"}", encodeURIComponent(activityId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete Activity Images
     * 
     * @param imageId 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteActivityImagesApiActivitiesImagesImageIdDelete(imageId: kotlin.Int) : kotlin.Any {
        val localVarResponse = deleteActivityImagesApiActivitiesImagesImageIdDeleteWithHttpInfo(imageId = imageId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete Activity Images
     * 
     * @param imageId 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteActivityImagesApiActivitiesImagesImageIdDeleteWithHttpInfo(imageId: kotlin.Int) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = deleteActivityImagesApiActivitiesImagesImageIdDeleteRequestConfig(imageId = imageId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteActivityImagesApiActivitiesImagesImageIdDelete
     *
     * @param imageId 
     * @return RequestConfig
     */
    fun deleteActivityImagesApiActivitiesImagesImageIdDeleteRequestConfig(imageId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/activities/images/{image_id}".replace("{"+"image_id"+"}", encodeURIComponent(imageId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete Activity Review
     * 
     * @param reviewId 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteActivityReviewApiActivitiesReviewsReviewIdDelete(reviewId: kotlin.Int) : kotlin.Any {
        val localVarResponse = deleteActivityReviewApiActivitiesReviewsReviewIdDeleteWithHttpInfo(reviewId = reviewId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete Activity Review
     * 
     * @param reviewId 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteActivityReviewApiActivitiesReviewsReviewIdDeleteWithHttpInfo(reviewId: kotlin.Int) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = deleteActivityReviewApiActivitiesReviewsReviewIdDeleteRequestConfig(reviewId = reviewId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteActivityReviewApiActivitiesReviewsReviewIdDelete
     *
     * @param reviewId 
     * @return RequestConfig
     */
    fun deleteActivityReviewApiActivitiesReviewsReviewIdDeleteRequestConfig(reviewId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/activities/reviews/{review_id}".replace("{"+"review_id"+"}", encodeURIComponent(reviewId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Activities
     * 
     * @param searchTerm  (optional, default to "")
     * @param sortField  (optional, default to "id")
     * @param sortOrder  (optional, default to "desc")
     * @param limit  (optional, default to 10)
     * @param page  (optional, default to 1)
     * @param categories  (optional)
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getActivitiesApiActivitiesSearchGet(searchTerm: kotlin.String? = "", sortField: kotlin.String? = "id", sortOrder: kotlin.String? = "desc", limit: kotlin.Int? = 10, page: kotlin.Int? = 1, categories: kotlin.String? = null) : kotlin.Any {
        val localVarResponse = getActivitiesApiActivitiesSearchGetWithHttpInfo(searchTerm = searchTerm, sortField = sortField, sortOrder = sortOrder, limit = limit, page = page, categories = categories)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Activities
     * 
     * @param searchTerm  (optional, default to "")
     * @param sortField  (optional, default to "id")
     * @param sortOrder  (optional, default to "desc")
     * @param limit  (optional, default to 10)
     * @param page  (optional, default to 1)
     * @param categories  (optional)
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getActivitiesApiActivitiesSearchGetWithHttpInfo(searchTerm: kotlin.String?, sortField: kotlin.String?, sortOrder: kotlin.String?, limit: kotlin.Int?, page: kotlin.Int?, categories: kotlin.String?) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = getActivitiesApiActivitiesSearchGetRequestConfig(searchTerm = searchTerm, sortField = sortField, sortOrder = sortOrder, limit = limit, page = page, categories = categories)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getActivitiesApiActivitiesSearchGet
     *
     * @param searchTerm  (optional, default to "")
     * @param sortField  (optional, default to "id")
     * @param sortOrder  (optional, default to "desc")
     * @param limit  (optional, default to 10)
     * @param page  (optional, default to 1)
     * @param categories  (optional)
     * @return RequestConfig
     */
    fun getActivitiesApiActivitiesSearchGetRequestConfig(searchTerm: kotlin.String?, sortField: kotlin.String?, sortOrder: kotlin.String?, limit: kotlin.Int?, page: kotlin.Int?, categories: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (searchTerm != null) {
                    put("search_term", listOf(searchTerm.toString()))
                }
                if (sortField != null) {
                    put("sort_field", listOf(sortField.toString()))
                }
                if (sortOrder != null) {
                    put("sort_order", listOf(sortOrder.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (categories != null) {
                    put("categories", listOf(categories.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/activities/search",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Activities By Location
     * 
     * @param latitude 
     * @param longitude 
     * @param radius  (optional, default to 1000)
     * @param searchTerm  (optional, default to "")
     * @param categories  (optional)
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getActivitiesByLocationApiActivitiesSearchLocationGet(latitude: java.math.BigDecimal, longitude: java.math.BigDecimal, radius: kotlin.Int? = 1000, searchTerm: kotlin.String? = "", categories: kotlin.String? = null) : kotlin.Any {
        val localVarResponse = getActivitiesByLocationApiActivitiesSearchLocationGetWithHttpInfo(latitude = latitude, longitude = longitude, radius = radius, searchTerm = searchTerm, categories = categories)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Activities By Location
     * 
     * @param latitude 
     * @param longitude 
     * @param radius  (optional, default to 1000)
     * @param searchTerm  (optional, default to "")
     * @param categories  (optional)
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getActivitiesByLocationApiActivitiesSearchLocationGetWithHttpInfo(latitude: java.math.BigDecimal, longitude: java.math.BigDecimal, radius: kotlin.Int?, searchTerm: kotlin.String?, categories: kotlin.String?) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = getActivitiesByLocationApiActivitiesSearchLocationGetRequestConfig(latitude = latitude, longitude = longitude, radius = radius, searchTerm = searchTerm, categories = categories)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getActivitiesByLocationApiActivitiesSearchLocationGet
     *
     * @param latitude 
     * @param longitude 
     * @param radius  (optional, default to 1000)
     * @param searchTerm  (optional, default to "")
     * @param categories  (optional)
     * @return RequestConfig
     */
    fun getActivitiesByLocationApiActivitiesSearchLocationGetRequestConfig(latitude: java.math.BigDecimal, longitude: java.math.BigDecimal, radius: kotlin.Int?, searchTerm: kotlin.String?, categories: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("latitude", listOf(latitude.toString()))
                put("longitude", listOf(longitude.toString()))
                if (radius != null) {
                    put("radius", listOf(radius.toString()))
                }
                if (searchTerm != null) {
                    put("search_term", listOf(searchTerm.toString()))
                }
                if (categories != null) {
                    put("categories", listOf(categories.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/activities/search/location",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Activity
     * 
     * @param activityId 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getActivityApiActivitiesActivityIdGet(activityId: kotlin.Int) : kotlin.Any {
        val localVarResponse = getActivityApiActivitiesActivityIdGetWithHttpInfo(activityId = activityId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Activity
     * 
     * @param activityId 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getActivityApiActivitiesActivityIdGetWithHttpInfo(activityId: kotlin.Int) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = getActivityApiActivitiesActivityIdGetRequestConfig(activityId = activityId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getActivityApiActivitiesActivityIdGet
     *
     * @param activityId 
     * @return RequestConfig
     */
    fun getActivityApiActivitiesActivityIdGetRequestConfig(activityId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/activities/{activity_id}".replace("{"+"activity_id"+"}", encodeURIComponent(activityId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Activity Images
     * 
     * @param activityId 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getActivityImagesApiActivitiesImagesActivityActivityIdGet(activityId: kotlin.Int) : kotlin.Any {
        val localVarResponse = getActivityImagesApiActivitiesImagesActivityActivityIdGetWithHttpInfo(activityId = activityId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Activity Images
     * 
     * @param activityId 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getActivityImagesApiActivitiesImagesActivityActivityIdGetWithHttpInfo(activityId: kotlin.Int) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = getActivityImagesApiActivitiesImagesActivityActivityIdGetRequestConfig(activityId = activityId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getActivityImagesApiActivitiesImagesActivityActivityIdGet
     *
     * @param activityId 
     * @return RequestConfig
     */
    fun getActivityImagesApiActivitiesImagesActivityActivityIdGetRequestConfig(activityId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/activities/images/activity/{activity_id}".replace("{"+"activity_id"+"}", encodeURIComponent(activityId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Image
     * 
     * @param imageId 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getImageApiActivitiesImagesImageIdGet(imageId: kotlin.Int) : kotlin.Any {
        val localVarResponse = getImageApiActivitiesImagesImageIdGetWithHttpInfo(imageId = imageId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Image
     * 
     * @param imageId 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getImageApiActivitiesImagesImageIdGetWithHttpInfo(imageId: kotlin.Int) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = getImageApiActivitiesImagesImageIdGetRequestConfig(imageId = imageId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getImageApiActivitiesImagesImageIdGet
     *
     * @param imageId 
     * @return RequestConfig
     */
    fun getImageApiActivitiesImagesImageIdGetRequestConfig(imageId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/activities/images/{image_id}".replace("{"+"image_id"+"}", encodeURIComponent(imageId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Reviews
     * 
     * @param searchTerm  (optional, default to "")
     * @param sortField  (optional, default to "id")
     * @param sortOrder  (optional, default to "desc")
     * @param limit  (optional, default to 10)
     * @param page  (optional, default to 1)
     * @param activityId  (optional, default to 0)
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getReviewsApiActivitiesReviewsGet(searchTerm: kotlin.String? = "", sortField: kotlin.String? = "id", sortOrder: kotlin.String? = "desc", limit: kotlin.Int? = 10, page: kotlin.Int? = 1, activityId: kotlin.Int? = 0) : kotlin.Any {
        val localVarResponse = getReviewsApiActivitiesReviewsGetWithHttpInfo(searchTerm = searchTerm, sortField = sortField, sortOrder = sortOrder, limit = limit, page = page, activityId = activityId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Reviews
     * 
     * @param searchTerm  (optional, default to "")
     * @param sortField  (optional, default to "id")
     * @param sortOrder  (optional, default to "desc")
     * @param limit  (optional, default to 10)
     * @param page  (optional, default to 1)
     * @param activityId  (optional, default to 0)
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getReviewsApiActivitiesReviewsGetWithHttpInfo(searchTerm: kotlin.String?, sortField: kotlin.String?, sortOrder: kotlin.String?, limit: kotlin.Int?, page: kotlin.Int?, activityId: kotlin.Int?) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = getReviewsApiActivitiesReviewsGetRequestConfig(searchTerm = searchTerm, sortField = sortField, sortOrder = sortOrder, limit = limit, page = page, activityId = activityId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getReviewsApiActivitiesReviewsGet
     *
     * @param searchTerm  (optional, default to "")
     * @param sortField  (optional, default to "id")
     * @param sortOrder  (optional, default to "desc")
     * @param limit  (optional, default to 10)
     * @param page  (optional, default to 1)
     * @param activityId  (optional, default to 0)
     * @return RequestConfig
     */
    fun getReviewsApiActivitiesReviewsGetRequestConfig(searchTerm: kotlin.String?, sortField: kotlin.String?, sortOrder: kotlin.String?, limit: kotlin.Int?, page: kotlin.Int?, activityId: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (searchTerm != null) {
                    put("search_term", listOf(searchTerm.toString()))
                }
                if (sortField != null) {
                    put("sort_field", listOf(sortField.toString()))
                }
                if (sortOrder != null) {
                    put("sort_order", listOf(sortOrder.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (activityId != null) {
                    put("activity_id", listOf(activityId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/activities/reviews/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update Activity
     * 
     * @param activityEditDTO 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateActivityApiActivitiesEditPost(activityEditDTO: ActivityEditDTO) : kotlin.Any {
        val localVarResponse = updateActivityApiActivitiesEditPostWithHttpInfo(activityEditDTO = activityEditDTO)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update Activity
     * 
     * @param activityEditDTO 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateActivityApiActivitiesEditPostWithHttpInfo(activityEditDTO: ActivityEditDTO) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = updateActivityApiActivitiesEditPostRequestConfig(activityEditDTO = activityEditDTO)

        return request<ActivityEditDTO, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateActivityApiActivitiesEditPost
     *
     * @param activityEditDTO 
     * @return RequestConfig
     */
    fun updateActivityApiActivitiesEditPostRequestConfig(activityEditDTO: ActivityEditDTO) : RequestConfig<ActivityEditDTO> {
        val localVariableBody = activityEditDTO
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/activities/edit",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Upload Activity Images
     * 
     * @param activityId 
     * @param images 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun uploadActivityImagesApiActivitiesImagesActivityActivityIdUploadPost(activityId: kotlin.Int, images: kotlin.collections.List<java.io.File>) : kotlin.Any {
        val localVarResponse = uploadActivityImagesApiActivitiesImagesActivityActivityIdUploadPostWithHttpInfo(activityId = activityId, images = images)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Upload Activity Images
     * 
     * @param activityId 
     * @param images 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun uploadActivityImagesApiActivitiesImagesActivityActivityIdUploadPostWithHttpInfo(activityId: kotlin.Int, images: kotlin.collections.List<java.io.File>) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = uploadActivityImagesApiActivitiesImagesActivityActivityIdUploadPostRequestConfig(activityId = activityId, images = images)

        return request<Map<String, PartConfig<*>>, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation uploadActivityImagesApiActivitiesImagesActivityActivityIdUploadPost
     *
     * @param activityId 
     * @param images 
     * @return RequestConfig
     */
    fun uploadActivityImagesApiActivitiesImagesActivityActivityIdUploadPostRequestConfig(activityId: kotlin.Int, images: kotlin.collections.List<java.io.File>) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "images" to PartConfig(body = images, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/activities/images/activity/{activity_id}/upload".replace("{"+"activity_id"+"}", encodeURIComponent(activityId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Upload Hero Image
     * 
     * @param activityId 
     * @param image 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun uploadHeroImageApiActivitiesImagesActivityActivityIdHeroUploadPost(activityId: kotlin.Int, image: java.io.File) : kotlin.Any {
        val localVarResponse = uploadHeroImageApiActivitiesImagesActivityActivityIdHeroUploadPostWithHttpInfo(activityId = activityId, image = image)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Upload Hero Image
     * 
     * @param activityId 
     * @param image 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun uploadHeroImageApiActivitiesImagesActivityActivityIdHeroUploadPostWithHttpInfo(activityId: kotlin.Int, image: java.io.File) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = uploadHeroImageApiActivitiesImagesActivityActivityIdHeroUploadPostRequestConfig(activityId = activityId, image = image)

        return request<Map<String, PartConfig<*>>, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation uploadHeroImageApiActivitiesImagesActivityActivityIdHeroUploadPost
     *
     * @param activityId 
     * @param image 
     * @return RequestConfig
     */
    fun uploadHeroImageApiActivitiesImagesActivityActivityIdHeroUploadPostRequestConfig(activityId: kotlin.Int, image: java.io.File) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "image" to PartConfig(body = image, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/activities/images/activity/{activity_id}/hero/upload".replace("{"+"activity_id"+"}", encodeURIComponent(activityId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
