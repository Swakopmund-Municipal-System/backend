//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DefaultAPI {

    /**
     Create Missed Waste Pickup
     
     - parameter createMissedWastePickupDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createMissedWastePickupApiWasteManagementMissedWastePickupsPost(createMissedWastePickupDto: CreateMissedWastePickupDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return createMissedWastePickupApiWasteManagementMissedWastePickupsPostWithRequestBuilder(createMissedWastePickupDto: createMissedWastePickupDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Missed Waste Pickup
     - POST /api/waste-management/missed_waste_pickups/
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: X-API-KEY
     - parameter createMissedWastePickupDto: (body)  
     - returns: RequestBuilder<AnyCodable?> 
     */
    open class func createMissedWastePickupApiWasteManagementMissedWastePickupsPostWithRequestBuilder(createMissedWastePickupDto: CreateMissedWastePickupDto) -> RequestBuilder<AnyCodable?> {
        let localVariablePath = "/api/waste-management/missed_waste_pickups/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createMissedWastePickupDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable?>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Missed Waste Pickup Details
     
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMissedWastePickupDetailsApiWasteManagementMissedWastePickupsIdGet(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MissedWastePickupSearchResultDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getMissedWastePickupDetailsApiWasteManagementMissedWastePickupsIdGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Missed Waste Pickup Details
     - GET /api/waste-management/missed_waste_pickups/{id}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: X-API-KEY
     - parameter id: (path)  
     - returns: RequestBuilder<MissedWastePickupSearchResultDto> 
     */
    open class func getMissedWastePickupDetailsApiWasteManagementMissedWastePickupsIdGetWithRequestBuilder(id: Int) -> RequestBuilder<MissedWastePickupSearchResultDto> {
        var localVariablePath = "/api/waste-management/missed_waste_pickups/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MissedWastePickupSearchResultDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Missed Waste Pickups
     
     - parameter searchTerm: (query)  (optional, default to "")
     - parameter sortField: (query)  (optional, default to "id")
     - parameter sortOrder: (query)  (optional, default to "desc")
     - parameter limit: (query)  (optional, default to 10)
     - parameter page: (query)  (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMissedWastePickupsApiWasteManagementMissedWastePickupsGet(searchTerm: String? = nil, sortField: String? = nil, sortOrder: String? = nil, limit: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [MissedWastePickupSearchResultDto]?, _ error: Error?) -> Void)) -> RequestTask {
        return getMissedWastePickupsApiWasteManagementMissedWastePickupsGetWithRequestBuilder(searchTerm: searchTerm, sortField: sortField, sortOrder: sortOrder, limit: limit, page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Missed Waste Pickups
     - GET /api/waste-management/missed_waste_pickups
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: X-API-KEY
     - parameter searchTerm: (query)  (optional, default to "")
     - parameter sortField: (query)  (optional, default to "id")
     - parameter sortOrder: (query)  (optional, default to "desc")
     - parameter limit: (query)  (optional, default to 10)
     - parameter page: (query)  (optional, default to 1)
     - returns: RequestBuilder<[MissedWastePickupSearchResultDto]> 
     */
    open class func getMissedWastePickupsApiWasteManagementMissedWastePickupsGetWithRequestBuilder(searchTerm: String? = nil, sortField: String? = nil, sortOrder: String? = nil, limit: Int? = nil, page: Int? = nil) -> RequestBuilder<[MissedWastePickupSearchResultDto]> {
        let localVariablePath = "/api/waste-management/missed_waste_pickups"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "search_term": (wrappedValue: searchTerm?.encodeToJSON(), isExplode: true),
            "sort_field": (wrappedValue: sortField?.encodeToJSON(), isExplode: true),
            "sort_order": (wrappedValue: sortOrder?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[MissedWastePickupSearchResultDto]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update Missed Waste Pickup Status
     
     - parameter updateMissedWastePickupStatusDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateMissedWastePickupStatusApiWasteManagementMissedWastePickupsUpdateStatusPost(updateMissedWastePickupStatusDto: UpdateMissedWastePickupStatusDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return updateMissedWastePickupStatusApiWasteManagementMissedWastePickupsUpdateStatusPostWithRequestBuilder(updateMissedWastePickupStatusDto: updateMissedWastePickupStatusDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Missed Waste Pickup Status
     - POST /api/waste-management/missed_waste_pickups/update_status
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: X-API-KEY
     - parameter updateMissedWastePickupStatusDto: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func updateMissedWastePickupStatusApiWasteManagementMissedWastePickupsUpdateStatusPostWithRequestBuilder(updateMissedWastePickupStatusDto: UpdateMissedWastePickupStatusDto) -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/api/waste-management/missed_waste_pickups/update_status"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateMissedWastePickupStatusDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
