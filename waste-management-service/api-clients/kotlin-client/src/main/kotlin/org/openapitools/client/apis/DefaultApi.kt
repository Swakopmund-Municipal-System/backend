/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.CreateMissedWastePickupDto
import org.openapitools.client.models.HTTPValidationError
import org.openapitools.client.models.MissedWastePickupSearchResultDto
import org.openapitools.client.models.UpdateMissedWastePickupStatusDto

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class DefaultApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Create Missed Waste Pickup
     * 
     * @param createMissedWastePickupDto 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createMissedWastePickupApiWasteManagementMissedWastePickupsPost(createMissedWastePickupDto: CreateMissedWastePickupDto) : kotlin.Any {
        val localVarResponse = createMissedWastePickupApiWasteManagementMissedWastePickupsPostWithHttpInfo(createMissedWastePickupDto = createMissedWastePickupDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create Missed Waste Pickup
     * 
     * @param createMissedWastePickupDto 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createMissedWastePickupApiWasteManagementMissedWastePickupsPostWithHttpInfo(createMissedWastePickupDto: CreateMissedWastePickupDto) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = createMissedWastePickupApiWasteManagementMissedWastePickupsPostRequestConfig(createMissedWastePickupDto = createMissedWastePickupDto)

        return request<CreateMissedWastePickupDto, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createMissedWastePickupApiWasteManagementMissedWastePickupsPost
     *
     * @param createMissedWastePickupDto 
     * @return RequestConfig
     */
    fun createMissedWastePickupApiWasteManagementMissedWastePickupsPostRequestConfig(createMissedWastePickupDto: CreateMissedWastePickupDto) : RequestConfig<CreateMissedWastePickupDto> {
        val localVariableBody = createMissedWastePickupDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/waste-management/missed_waste_pickups/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Missed Waste Pickup Details
     * 
     * @param id 
     * @return MissedWastePickupSearchResultDto
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getMissedWastePickupDetailsApiWasteManagementMissedWastePickupsIdGet(id: kotlin.Int) : MissedWastePickupSearchResultDto {
        val localVarResponse = getMissedWastePickupDetailsApiWasteManagementMissedWastePickupsIdGetWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MissedWastePickupSearchResultDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Missed Waste Pickup Details
     * 
     * @param id 
     * @return ApiResponse<MissedWastePickupSearchResultDto?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getMissedWastePickupDetailsApiWasteManagementMissedWastePickupsIdGetWithHttpInfo(id: kotlin.Int) : ApiResponse<MissedWastePickupSearchResultDto?> {
        val localVariableConfig = getMissedWastePickupDetailsApiWasteManagementMissedWastePickupsIdGetRequestConfig(id = id)

        return request<Unit, MissedWastePickupSearchResultDto>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getMissedWastePickupDetailsApiWasteManagementMissedWastePickupsIdGet
     *
     * @param id 
     * @return RequestConfig
     */
    fun getMissedWastePickupDetailsApiWasteManagementMissedWastePickupsIdGetRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/waste-management/missed_waste_pickups/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Missed Waste Pickups
     * 
     * @param searchTerm  (optional, default to "")
     * @param sortField  (optional, default to "id")
     * @param sortOrder  (optional, default to "desc")
     * @param limit  (optional, default to 10)
     * @param page  (optional, default to 1)
     * @return kotlin.collections.List<MissedWastePickupSearchResultDto>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getMissedWastePickupsApiWasteManagementMissedWastePickupsGet(searchTerm: kotlin.String? = "", sortField: kotlin.String? = "id", sortOrder: kotlin.String? = "desc", limit: kotlin.Int? = 10, page: kotlin.Int? = 1) : kotlin.collections.List<MissedWastePickupSearchResultDto> {
        val localVarResponse = getMissedWastePickupsApiWasteManagementMissedWastePickupsGetWithHttpInfo(searchTerm = searchTerm, sortField = sortField, sortOrder = sortOrder, limit = limit, page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<MissedWastePickupSearchResultDto>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Missed Waste Pickups
     * 
     * @param searchTerm  (optional, default to "")
     * @param sortField  (optional, default to "id")
     * @param sortOrder  (optional, default to "desc")
     * @param limit  (optional, default to 10)
     * @param page  (optional, default to 1)
     * @return ApiResponse<kotlin.collections.List<MissedWastePickupSearchResultDto>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getMissedWastePickupsApiWasteManagementMissedWastePickupsGetWithHttpInfo(searchTerm: kotlin.String?, sortField: kotlin.String?, sortOrder: kotlin.String?, limit: kotlin.Int?, page: kotlin.Int?) : ApiResponse<kotlin.collections.List<MissedWastePickupSearchResultDto>?> {
        val localVariableConfig = getMissedWastePickupsApiWasteManagementMissedWastePickupsGetRequestConfig(searchTerm = searchTerm, sortField = sortField, sortOrder = sortOrder, limit = limit, page = page)

        return request<Unit, kotlin.collections.List<MissedWastePickupSearchResultDto>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getMissedWastePickupsApiWasteManagementMissedWastePickupsGet
     *
     * @param searchTerm  (optional, default to "")
     * @param sortField  (optional, default to "id")
     * @param sortOrder  (optional, default to "desc")
     * @param limit  (optional, default to 10)
     * @param page  (optional, default to 1)
     * @return RequestConfig
     */
    fun getMissedWastePickupsApiWasteManagementMissedWastePickupsGetRequestConfig(searchTerm: kotlin.String?, sortField: kotlin.String?, sortOrder: kotlin.String?, limit: kotlin.Int?, page: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (searchTerm != null) {
                    put("search_term", listOf(searchTerm.toString()))
                }
                if (sortField != null) {
                    put("sort_field", listOf(sortField.toString()))
                }
                if (sortOrder != null) {
                    put("sort_order", listOf(sortOrder.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/waste-management/missed_waste_pickups",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update Missed Waste Pickup Status
     * 
     * @param updateMissedWastePickupStatusDto 
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateMissedWastePickupStatusApiWasteManagementMissedWastePickupsUpdateStatusPost(updateMissedWastePickupStatusDto: UpdateMissedWastePickupStatusDto) : kotlin.Any {
        val localVarResponse = updateMissedWastePickupStatusApiWasteManagementMissedWastePickupsUpdateStatusPostWithHttpInfo(updateMissedWastePickupStatusDto = updateMissedWastePickupStatusDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update Missed Waste Pickup Status
     * 
     * @param updateMissedWastePickupStatusDto 
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateMissedWastePickupStatusApiWasteManagementMissedWastePickupsUpdateStatusPostWithHttpInfo(updateMissedWastePickupStatusDto: UpdateMissedWastePickupStatusDto) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = updateMissedWastePickupStatusApiWasteManagementMissedWastePickupsUpdateStatusPostRequestConfig(updateMissedWastePickupStatusDto = updateMissedWastePickupStatusDto)

        return request<UpdateMissedWastePickupStatusDto, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateMissedWastePickupStatusApiWasteManagementMissedWastePickupsUpdateStatusPost
     *
     * @param updateMissedWastePickupStatusDto 
     * @return RequestConfig
     */
    fun updateMissedWastePickupStatusApiWasteManagementMissedWastePickupsUpdateStatusPostRequestConfig(updateMissedWastePickupStatusDto: UpdateMissedWastePickupStatusDto) : RequestConfig<UpdateMissedWastePickupStatusDto> {
        val localVariableBody = updateMissedWastePickupStatusDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/waste-management/missed_waste_pickups/update_status",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
