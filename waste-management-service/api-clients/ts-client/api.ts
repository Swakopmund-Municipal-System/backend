/* tslint:disable */
/* eslint-disable */
/**
 * Waste management service
 * Manages waste management operations
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * DTO for creating a missed waste pickup.
 * @export
 * @interface CreateMissedWastePickupDto
 */
export interface CreateMissedWastePickupDto {
    /**
     * 
     * @type {string}
     * @memberof CreateMissedWastePickupDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof CreateMissedWastePickupDto
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof CreateMissedWastePickupDto
     */
    'address': string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * DTO for the result of a missed waste pickup search.
 * @export
 * @interface MissedWastePickupSearchResultDto
 */
export interface MissedWastePickupSearchResultDto {
    /**
     * 
     * @type {number}
     * @memberof MissedWastePickupSearchResultDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof MissedWastePickupSearchResultDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof MissedWastePickupSearchResultDto
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof MissedWastePickupSearchResultDto
     */
    'address': string;
    /**
     * 
     * @type {number}
     * @memberof MissedWastePickupSearchResultDto
     */
    'status': number;
    /**
     * 
     * @type {string}
     * @memberof MissedWastePickupSearchResultDto
     */
    'userId': string;
}
/**
 * DTO for updating the status of a missed waste pickup.
 * @export
 * @interface UpdateMissedWastePickupStatusDto
 */
export interface UpdateMissedWastePickupStatusDto {
    /**
     * 
     * @type {number}
     * @memberof UpdateMissedWastePickupStatusDto
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof UpdateMissedWastePickupStatusDto
     */
    'status': number;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Missed Waste Pickup
         * @param {CreateMissedWastePickupDto} createMissedWastePickupDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMissedWastePickupApiWasteManagementMissedWastePickupsPost: async (createMissedWastePickupDto: CreateMissedWastePickupDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMissedWastePickupDto' is not null or undefined
            assertParamExists('createMissedWastePickupApiWasteManagementMissedWastePickupsPost', 'createMissedWastePickupDto', createMissedWastePickupDto)
            const localVarPath = `/api/waste-management/missed_waste_pickups/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication X-API-KEY required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMissedWastePickupDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Missed Waste Pickup Details
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMissedWastePickupDetailsApiWasteManagementMissedWastePickupsIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMissedWastePickupDetailsApiWasteManagementMissedWastePickupsIdGet', 'id', id)
            const localVarPath = `/api/waste-management/missed_waste_pickups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication X-API-KEY required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Missed Waste Pickups
         * @param {string} [searchTerm] 
         * @param {string} [sortField] 
         * @param {string} [sortOrder] 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMissedWastePickupsApiWasteManagementMissedWastePickupsGet: async (searchTerm?: string, sortField?: string, sortOrder?: string, limit?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/waste-management/missed_waste_pickups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication X-API-KEY required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            if (searchTerm !== undefined) {
                localVarQueryParameter['search_term'] = searchTerm;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['sort_field'] = sortField;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Missed Waste Pickup Status
         * @param {UpdateMissedWastePickupStatusDto} updateMissedWastePickupStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMissedWastePickupStatusApiWasteManagementMissedWastePickupsUpdateStatusPost: async (updateMissedWastePickupStatusDto: UpdateMissedWastePickupStatusDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateMissedWastePickupStatusDto' is not null or undefined
            assertParamExists('updateMissedWastePickupStatusApiWasteManagementMissedWastePickupsUpdateStatusPost', 'updateMissedWastePickupStatusDto', updateMissedWastePickupStatusDto)
            const localVarPath = `/api/waste-management/missed_waste_pickups/update_status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication X-API-KEY required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMissedWastePickupStatusDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Missed Waste Pickup
         * @param {CreateMissedWastePickupDto} createMissedWastePickupDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMissedWastePickupApiWasteManagementMissedWastePickupsPost(createMissedWastePickupDto: CreateMissedWastePickupDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMissedWastePickupApiWasteManagementMissedWastePickupsPost(createMissedWastePickupDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createMissedWastePickupApiWasteManagementMissedWastePickupsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Missed Waste Pickup Details
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMissedWastePickupDetailsApiWasteManagementMissedWastePickupsIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MissedWastePickupSearchResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMissedWastePickupDetailsApiWasteManagementMissedWastePickupsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMissedWastePickupDetailsApiWasteManagementMissedWastePickupsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Missed Waste Pickups
         * @param {string} [searchTerm] 
         * @param {string} [sortField] 
         * @param {string} [sortOrder] 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMissedWastePickupsApiWasteManagementMissedWastePickupsGet(searchTerm?: string, sortField?: string, sortOrder?: string, limit?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MissedWastePickupSearchResultDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMissedWastePickupsApiWasteManagementMissedWastePickupsGet(searchTerm, sortField, sortOrder, limit, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMissedWastePickupsApiWasteManagementMissedWastePickupsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Missed Waste Pickup Status
         * @param {UpdateMissedWastePickupStatusDto} updateMissedWastePickupStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMissedWastePickupStatusApiWasteManagementMissedWastePickupsUpdateStatusPost(updateMissedWastePickupStatusDto: UpdateMissedWastePickupStatusDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMissedWastePickupStatusApiWasteManagementMissedWastePickupsUpdateStatusPost(updateMissedWastePickupStatusDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateMissedWastePickupStatusApiWasteManagementMissedWastePickupsUpdateStatusPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Missed Waste Pickup
         * @param {CreateMissedWastePickupDto} createMissedWastePickupDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMissedWastePickupApiWasteManagementMissedWastePickupsPost(createMissedWastePickupDto: CreateMissedWastePickupDto, options?: any): AxiosPromise<any> {
            return localVarFp.createMissedWastePickupApiWasteManagementMissedWastePickupsPost(createMissedWastePickupDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Missed Waste Pickup Details
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMissedWastePickupDetailsApiWasteManagementMissedWastePickupsIdGet(id: number, options?: any): AxiosPromise<MissedWastePickupSearchResultDto> {
            return localVarFp.getMissedWastePickupDetailsApiWasteManagementMissedWastePickupsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Missed Waste Pickups
         * @param {string} [searchTerm] 
         * @param {string} [sortField] 
         * @param {string} [sortOrder] 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMissedWastePickupsApiWasteManagementMissedWastePickupsGet(searchTerm?: string, sortField?: string, sortOrder?: string, limit?: number, page?: number, options?: any): AxiosPromise<Array<MissedWastePickupSearchResultDto>> {
            return localVarFp.getMissedWastePickupsApiWasteManagementMissedWastePickupsGet(searchTerm, sortField, sortOrder, limit, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Missed Waste Pickup Status
         * @param {UpdateMissedWastePickupStatusDto} updateMissedWastePickupStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMissedWastePickupStatusApiWasteManagementMissedWastePickupsUpdateStatusPost(updateMissedWastePickupStatusDto: UpdateMissedWastePickupStatusDto, options?: any): AxiosPromise<any> {
            return localVarFp.updateMissedWastePickupStatusApiWasteManagementMissedWastePickupsUpdateStatusPost(updateMissedWastePickupStatusDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Create Missed Waste Pickup
     * @param {CreateMissedWastePickupDto} createMissedWastePickupDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createMissedWastePickupApiWasteManagementMissedWastePickupsPost(createMissedWastePickupDto: CreateMissedWastePickupDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createMissedWastePickupApiWasteManagementMissedWastePickupsPost(createMissedWastePickupDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Missed Waste Pickup Details
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMissedWastePickupDetailsApiWasteManagementMissedWastePickupsIdGet(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMissedWastePickupDetailsApiWasteManagementMissedWastePickupsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Missed Waste Pickups
     * @param {string} [searchTerm] 
     * @param {string} [sortField] 
     * @param {string} [sortOrder] 
     * @param {number} [limit] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMissedWastePickupsApiWasteManagementMissedWastePickupsGet(searchTerm?: string, sortField?: string, sortOrder?: string, limit?: number, page?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMissedWastePickupsApiWasteManagementMissedWastePickupsGet(searchTerm, sortField, sortOrder, limit, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Missed Waste Pickup Status
     * @param {UpdateMissedWastePickupStatusDto} updateMissedWastePickupStatusDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateMissedWastePickupStatusApiWasteManagementMissedWastePickupsUpdateStatusPost(updateMissedWastePickupStatusDto: UpdateMissedWastePickupStatusDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateMissedWastePickupStatusApiWasteManagementMissedWastePickupsUpdateStatusPost(updateMissedWastePickupStatusDto, options).then((request) => request(this.axios, this.basePath));
    }
}



